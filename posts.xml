<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>dkdc.dev</title>
<link>https://dkdc.dev/posts.html</link>
<atom:link href="https://dkdc.dev/posts.xml" rel="self" type="application/rss+xml"/>
<description>Cody&#39;s website</description>
<generator>quarto-1.4.554</generator>
<lastBuildDate>Sun, 05 May 2024 00:00:00 GMT</lastBuildDate>
<item>
  <title>How I lost my GitHub account</title>
  <dc:creator>Cody </dc:creator>
  <link>https://dkdc.dev/posts/how-i-lost-my-github-account/</link>
  <description><![CDATA[ 





<p>Occasionally, I am asked (or suspect people wonder) how I lost <a href="https://github.com/lostmygithubaccount">my GitHub account</a>. There’s a quick explanation on my account’s README:</p>
<blockquote class="blockquote">
<p>forked from <a href="https://github.com/cody-dkdc">cody-dkdc</a> (2FA was the downfall of that account)</p>
</blockquote>
<p>Short story longer, I thought my phone was waterproof and had it in my pocket in a pool outside of the United States. The phone broke – it was water resistant and I was dumb.</p>
<p>Upon returning to Florida, I went to get a new phone. I had to travel back to Washington state a day or two later and didn’t want to do so without a phone. For whatever reason, the phone people told me I either had to get a new number and I could get the new phone that day, or it would take longer.</p>
<p>I thought about it and decided a new phone number wasn’t a huge deal – text people, update accounts – so I went with that option. My GitHub account was last on my list of things I cared about at this point. Once I realized I needed to use it for work, I just created another one with a memorable name.</p>
<p>After creating my new account, the name grew on me and I decided to keep it. This is the story of how I lost my GitHub account.</p>



<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>GitHub</category>
  <guid>https://dkdc.dev/posts/how-i-lost-my-github-account/</guid>
  <pubDate>Sun, 05 May 2024 00:00:00 GMT</pubDate>
  <media:content url="https://dkdc.dev/posts/how-i-lost-my-github-account/thumbnail.png" medium="image" type="image/png" height="86" width="144"/>
</item>
<item>
  <title>Python + Rust: a simple tutorial</title>
  <dc:creator>Cody </dc:creator>
  <link>https://dkdc.dev/posts/pawz/</link>
  <description><![CDATA[ 





<p>This post is intended to provide a simple demonstration of a Python package that relies on core functionality written in Rust. You can <a href="https://github.com/lostmygithubaccount/pawz">view the source code on GitHub</a>.</p>
<section id="tools" class="level2">
<h2 class="anchored" data-anchor-id="tools">Tools</h2>
<p>In addition to Python and Rust, we’ll use the following tools:</p>
<ul>
<li><a href="https://github.com">GitHub</a>: repository hosting</li>
<li><a href="https://cli.github.com">GitHub CLI</a>: interact with GitHub from the command line</li>
<li><a href="https://github.com/casey/just">just</a>: a command runner</li>
<li><a href="https://github.com/jdx/mise">mise</a>: a tool for managing dev environments (Python/Rust versions)</li>
</ul>
<p>For generating and using Rust code in Python, we’ll use <a href="https://pyo3.rs/">PyO3</a>.</p>
</section>
<section id="setting-up-the-project" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-the-project">Setting up the project</h2>
<p>We’ll start with an overview of the project setup.</p>
<section id="picking-a-name" class="level3">
<h3 class="anchored" data-anchor-id="picking-a-name">Picking a name</h3>
<p>We need a good name for our project. Ideally, this can match how the package on PyPI. I chose <code>pawz</code> because it was not taken, is short, and leans into what the demo package will do.</p>
</section>
<section id="layout" class="level3">
<h3 class="anchored" data-anchor-id="layout">Layout</h3>
<p>Let’s start by looking at the file tree for <code>pawz</code>:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">venv</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">cody@dkdc</span> pawz % tree</span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./</span></span>
<span id="cb1-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> LICENSE</span>
<span id="cb1-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> dev-requirements.txt</span>
<span id="cb1-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> justfile</span>
<span id="cb1-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> pyproject.toml</span>
<span id="cb1-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> readme.md</span>
<span id="cb1-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> src/</span>
<span id="cb1-9">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> pawz/</span>
<span id="cb1-10">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│&nbsp;&nbsp;</span> └── __init__.py</span>
<span id="cb1-11">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> pawz-core/</span>
<span id="cb1-12">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> Cargo.toml</span>
<span id="cb1-13">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> pyproject.toml</span>
<span id="cb1-14">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> readme.md</span>
<span id="cb1-15">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> src/</span>
<span id="cb1-16">            <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> lib.rs</span>
<span id="cb1-17">            <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> main.rs</span>
<span id="cb1-18"></span>
<span id="cb1-19"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">5</span> directories, 11 files</span></code></pre></div>
<p>This setup is copied over from a private project, then modified to update the project name and reduce code to its minimal form.</p>
</section>
<section id="justfile" class="level3">
<h3 class="anchored" data-anchor-id="justfile">Justfile</h3>
<p>We can look at the <code>justfile</code> – <code>just</code> is a command runner – to get a sense of the things we will be doing:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode txt code-with-copy"><code class="sourceCode default"><span id="cb2-1"># Justfile</span>
<span id="cb2-2"></span>
<span id="cb2-3"># load environment variables</span>
<span id="cb2-4">set dotenv-load</span>
<span id="cb2-5"></span>
<span id="cb2-6"># aliases</span>
<span id="cb2-7">alias fmt:=format</span>
<span id="cb2-8"></span>
<span id="cb2-9"># list justfile recipes</span>
<span id="cb2-10">default:</span>
<span id="cb2-11">    just --list</span>
<span id="cb2-12"></span>
<span id="cb2-13"># setup</span>
<span id="cb2-14">setup:</span>
<span id="cb2-15">    @pip install -r dev-requirements.txt</span>
<span id="cb2-16"></span>
<span id="cb2-17"># build</span>
<span id="cb2-18">build:</span>
<span id="cb2-19">    just clean</span>
<span id="cb2-20">    @python -m build src/pawz-core</span>
<span id="cb2-21">    @python -m build</span>
<span id="cb2-22"></span>
<span id="cb2-23"># format</span>
<span id="cb2-24">format:</span>
<span id="cb2-25">    @cargo fmt --manifest-path src/pawz-core/Cargo.toml</span>
<span id="cb2-26">    @ruff format .</span>
<span id="cb2-27"></span>
<span id="cb2-28"># install</span>
<span id="cb2-29">install:</span>
<span id="cb2-30">    @maturin dev -m src/pawz-core/Cargo.toml</span>
<span id="cb2-31">    @pip install --upgrade -e '.[all]'</span>
<span id="cb2-32"></span>
<span id="cb2-33"># uninstall</span>
<span id="cb2-34">uninstall:</span>
<span id="cb2-35">    @pip uninstall pawz pawz-core -y</span>
<span id="cb2-36"></span>
<span id="cb2-37"># release-test</span>
<span id="cb2-38">release-test:</span>
<span id="cb2-39">    just build</span>
<span id="cb2-40">    @twine upload --repository testpypi src/pawz-core/dist/* -u __token__ -p ${PYPI_TEST_TOKEN}</span>
<span id="cb2-41">    @twine upload --repository testpypi dist/* -u __token__ -p ${PYPI_TEST_TOKEN}</span>
<span id="cb2-42"></span>
<span id="cb2-43"># release</span>
<span id="cb2-44">release:</span>
<span id="cb2-45">    just build</span>
<span id="cb2-46">    @twine upload src/pawz-core/dist/* -u __token__ -p ${PYPI_TOKEN}</span>
<span id="cb2-47">    @twine upload dist/* -u __token__ -p ${PYPI_TOKEN}</span>
<span id="cb2-48"></span>
<span id="cb2-49"># clean</span>
<span id="cb2-50">clean:</span>
<span id="cb2-51">    @rm -r src/pawz-core/target || True</span>
<span id="cb2-52">    @rm -rf src/pawz-core/dist || True</span>
<span id="cb2-53">    @rm -rf dist || True</span></code></pre></div>
</section>
<section id="python-and-rust-sub-projects" class="level3">
<h3 class="anchored" data-anchor-id="python-and-rust-sub-projects">Python and Rust sub-projects</h3>
<p>You may have already noticed above we’re building and publishing two Python packages – <code>pawz</code> is a pure Python package that depends on <code>pawz-core</code>, a pure Rust package with Python bindings.</p>
<p>You can see the package definitions in the respective <code>pyproject.toml</code>s:</p>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>Due to the website’s exquisite theme, you may not be able to tell that below are two separate tabs.</p>
</div>
</div>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true"><code>pawz</code>: pure Python</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false"><code>pawz-core</code>: pure Rust with Python bindings</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode toml code-with-copy"><code class="sourceCode toml"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[build-system]</span></span>
<span id="cb3-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">requires</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hatchling"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb3-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">build-backend</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hatchling.build"</span></span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[project]</span></span>
<span id="cb3-6"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">name</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pawz"</span></span>
<span id="cb3-7"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">version</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0.1.0"</span></span>
<span id="cb3-8"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">authors</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[{ </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cody"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">, </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">email</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cody@dkdc.dev"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> }]</span></span>
<span id="cb3-9"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">description</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a demo of Python + Rust"</span></span>
<span id="cb3-10"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">readme</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"readme.md"</span></span>
<span id="cb3-11"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">requires-python</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&gt;=3.11"</span></span>
<span id="cb3-12"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">classifiers</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb3-13">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Programming Language :: Python :: 3"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-14">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"License :: OSI Approved :: MIT License"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-15">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Operating System :: OS Independent"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-16"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb3-17"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">dependencies</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pawz_core"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb3-18"></span>
<span id="cb3-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[project.urls]</span></span>
<span id="cb3-20"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Homepage"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://github.com/lostmygithubaccount/pawz"</span></span>
<span id="cb3-21"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Bug Tracker"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://github.com/lostmygithubaccount/pawz/issues"</span></span></code></pre></div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode toml code-with-copy"><code class="sourceCode toml"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[build-system]</span></span>
<span id="cb4-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">requires</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"maturin&gt;=1.5,&lt;2.0"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb4-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">build-backend</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"maturin"</span></span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[project]</span></span>
<span id="cb4-6"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">name</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pawz_core"</span></span>
<span id="cb4-7"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">dynamic</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"version"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb4-8"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">authors</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[{ </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cody"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">, </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">email</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cody@dkdc.dev"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> }]</span></span>
<span id="cb4-9"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">description</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pawz core functionality (Rust!)"</span></span>
<span id="cb4-10"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">readme</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"readme.md"</span></span>
<span id="cb4-11"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">requires-python</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&gt;=3.11"</span></span>
<span id="cb4-12"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">classifiers</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb4-13">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Programming Language :: Python :: 3"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-14">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"License :: OSI Approved :: MIT License"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-15">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Operating System :: OS Independent"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-16"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb4-17"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">dependencies</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span></span>
<span id="cb4-18"></span>
<span id="cb4-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[tool.maturin]</span></span>
<span id="cb4-20"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">features</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pyo3/extension-module"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb4-21"></span>
<span id="cb4-22"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[project.urls]</span></span>
<span id="cb4-23"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Homepage"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://github.com/lostmygithubaccount/pawz"</span></span>
<span id="cb4-24"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Bug Tracker"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://github.com/lostmygithubaccount/pawz/issues"</span></span></code></pre></div>
</div>
</div>
</div>
<p>You’ll notice the primary difference is the build tooling – <code>hatchling</code> for the pure-Python project versus <code>maturin</code> for the Rust project.</p>
<p>With <code>pawz-core</code>, the package version is specified in the <code>Cargo.toml</code> instead of the <code>pyproject.toml</code> – we’ll take a closer look at that later.</p>
</section>
<section id="pawz" class="level3">
<h3 class="anchored" data-anchor-id="pawz"><code>pawz</code></h3>
<p>Let’s setup our Python package <code>pawz</code> – to start, all you need is an <code>__init__.py</code> file in the correct subdirectory:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># imports</span></span>
<span id="cb5-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pawz_core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pc</span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># exports</span></span>
<span id="cb5-5">__all__ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pc"</span>]</span></code></pre></div>
<p>All we’re doing at this point is making <code>pawz_core</code> available as a module from <code>pawz</code>. So, we can do something like:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pawz <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pz</span>
<span id="cb6-2"></span>
<span id="cb6-3">pz.pc.open_pawz()</span></code></pre></div>
<p>Where the <code>open_pawz()</code> method is defined in <code>pawz_core</code>. We haven’t done that yet, but will later.</p>
</section>
<section id="pawz-core" class="level3">
<h3 class="anchored" data-anchor-id="pawz-core"><code>pawz-core</code></h3>
<p>In addition to the <code>pyproject.toml</code> above, we need a <code>Cargo.toml</code> to define the Rust project:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode toml code-with-copy"><code class="sourceCode toml"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[package]</span></span>
<span id="cb7-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">name</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pawz_core"</span></span>
<span id="cb7-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">version</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0.1.0"</span></span>
<span id="cb7-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">edition</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2021"</span></span>
<span id="cb7-5"></span>
<span id="cb7-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[lib]</span></span>
<span id="cb7-7"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">name</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pawz_core"</span></span>
<span id="cb7-8"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">crate-type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cdylib"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb7-9"></span>
<span id="cb7-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[dependencies]</span></span>
<span id="cb7-11"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">pyo3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0.21.1"</span></span></code></pre></div>
<p>Notice the Python package’s version will match the version defined here.</p>
<p>We also need the <code>lib.rs</code> in the <code>src/</code> directory defining the functionality and exposing it through the Python bindings:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode rust code-with-copy"><code class="sourceCode rust"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">use</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">pyo3::prelude::</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*;</span></span>
<span id="cb8-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//use pyo3::exceptions::PyValueError;</span></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//use pyo3::types::PyTuple;</span></span>
<span id="cb8-4"></span>
<span id="cb8-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// A Python module implemented in Rust.</span></span>
<span id="cb8-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">#[</span>pymodule<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb8-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">#[</span>allow<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">(</span>deprecated<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb8-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">fn</span> pawz_core(_py<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Python<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> _m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>PyModule) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> PyResult<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-9">    <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">Ok</span>(())</span>
<span id="cb8-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Notice there’s nothing defined yet and a few things are commented out and prepended with an underscore to avoid the compiler complaining. However at this point, everything is fully functional – you can build <code>pawz-core</code> and <code>pawz</code> and import them.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
What about the <code>main.rs</code>?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>As of writing, the <code>main.rs</code> is a simple hello world:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode rust code-with-copy"><code class="sourceCode rust"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">fn</span> main() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-2">    <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">println!</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello, world!"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>You don’t need the file, but I find it useful to easily try things out in Rust. For instance, you can import things from <code>lib.rs</code> and run them.</p>
</div>
</div>
</div>
</section>
</section>
<section id="setup-the-python-environment" class="level2">
<h2 class="anchored" data-anchor-id="setup-the-python-environment">Setup the Python environment</h2>
<p>Let’s take a look at the <code>dev-requirements.txt</code>:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode txt code-with-copy"><code class="sourceCode default"><span id="cb10-1"># python</span>
<span id="cb10-2">ruff</span>
<span id="cb10-3">build</span>
<span id="cb10-4">twine</span>
<span id="cb10-5"></span>
<span id="cb10-6"># rust</span>
<span id="cb10-7">maturin</span></code></pre></div>
<p><code>ruff</code> is to format Python code, <code>build</code> is to build the Python packages, <code>twine</code> is to upload them to PyPI, and <code>maturin</code> is to build the Rust package with Python bindings. You can see the use of these tools above in the <code>justfile</code>.</p>
<section id="setup-a-virtual-python-environment" class="level3">
<h3 class="anchored" data-anchor-id="setup-a-virtual-python-environment">Setup a virtual Python environment</h3>
<p>You should generally use one virtual environment per project. I use <code>mise</code> to manage Python (and Rust) versions, but you don’t have to. You can run:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">venv</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">cody@dkdc</span> pawz % python <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> venv venv</span>
<span id="cb11-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">venv</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">cody@dkdc</span> pawz % source venv/bin/activate</span></code></pre></div>
<p>to create your virtual environment. At this point if you’ve installed <code>just</code>, you can run:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">venv</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">cody@dkdc</span> pawz % just setup</span></code></pre></div>
<p>This will install the dev dependencies defined above.</p>
</section>
<section id="installing-pawz-and-pawz-core" class="level3">
<h3 class="anchored" data-anchor-id="installing-pawz-and-pawz-core">Installing <code>pawz</code> and <code>pawz-core</code></h3>
<p>You can install <code>pawz</code> and <code>pawz-core</code> in local developer mode with:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb13-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">venv</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">cody@dkdc</span> pawz % just install</span></code></pre></div>
<p>Now you’re able to <code>import pawz as pz</code>!</p>
</section>
</section>
<section id="uploading-to-github" class="level2">
<h2 class="anchored" data-anchor-id="uploading-to-github">Uploading to GitHub</h2>
<p>There are multiple ways to do this, but I prefer something like:</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb14-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">venv</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">cody@dkdc</span> pawz % git init</span>
<span id="cb14-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">venv</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">cody@dkdc</span> pawz % gh repo create pawz <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--public</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--source</span> .</span>
<span id="cb14-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">venv</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">cody@dkdc</span> pawz % git checkout <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-b</span> main</span>
<span id="cb14-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">venv</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">cody@dkdc</span> pawz % git add .</span>
<span id="cb14-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">venv</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">cody@dkdc</span> pawz % git commit <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"initial commit"</span></span>
<span id="cb14-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">venv</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">cody@dkdc</span> pawz % git push <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--set-upstream</span> origin/main</span></code></pre></div>
<p>Now, your code should be up on GitHub!</p>
</section>
<section id="publishing-to-pypi" class="level2">
<h2 class="anchored" data-anchor-id="publishing-to-pypi">Publishing to PyPI</h2>
<p>Let’s publish <code>pawz</code> and <code>pawz-core</code> to PyPI. First, you need to generate and place PyPI tokens in a <code>.env</code> file:</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode txt code-with-copy"><code class="sourceCode default"><span id="cb15-1">PYPI_TOKEN = "pypi-XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"</span>
<span id="cb15-2">PYPI_TEST_TOKEN = "pypi-XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"</span></code></pre></div>
<p>Then run:</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb16-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">venv</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">cody@dkdc</span> pawz % just release-test</span>
<span id="cb16-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">venv</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">cody@dkdc</span> pawz % just release</span></code></pre></div>
</section>
<section id="doing-something" class="level2">
<h2 class="anchored" data-anchor-id="doing-something">Doing something</h2>
<p>Now, let’s do something! We’ll write some core functionality in Rust. For this demonstration, we’ll just open up a hardcoded URL pointing to a YouTube video.</p>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>In the <code>pyproject.toml</code> and <code>Cargo.toml</code> we should bump the version up so we can ship a new version later.</p>
</div>
</div>
</section>
<section id="rust-edits" class="level2">
<h2 class="anchored" data-anchor-id="rust-edits">Rust edits</h2>
<p>We need to add the <code>open</code> crate dependency in the <code>Cargo.toml</code>:</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode toml code-with-copy"><code class="sourceCode toml"><span id="cb17-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[package]</span></span>
<span id="cb17-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">name</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pawz_core"</span></span>
<span id="cb17-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">version</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0.2.0"</span></span>
<span id="cb17-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">edition</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2021"</span></span>
<span id="cb17-5"></span>
<span id="cb17-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[lib]</span></span>
<span id="cb17-7"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">name</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pawz_core"</span></span>
<span id="cb17-8"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">crate-type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cdylib"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb17-9"></span>
<span id="cb17-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[dependencies]</span></span>
<span id="cb17-11"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">pyo3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0.21.1"</span></span>
<span id="cb17-12"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">open</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"5.1.2"</span></span></code></pre></div>
<p>Then edit <code>lib.rs</code> to create our function and add it to the Python module:</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode rust code-with-copy"><code class="sourceCode rust"><span id="cb18-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">use</span> open<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb18-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">use</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">pyo3::prelude::</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*;</span></span>
<span id="cb18-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//use pyo3::exceptions::PyValueError;</span></span>
<span id="cb18-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//use pyo3::types::PyTuple;</span></span>
<span id="cb18-5"></span>
<span id="cb18-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">#[</span>pyfunction<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb18-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">fn</span> open_pawz() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb18-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://www.youtube.com/watch?v=gJ6slhwPp6E"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb18-9">    <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">open::</span>that(url)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unwrap()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb18-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb18-11"></span>
<span id="cb18-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// A Python module implemented in Rust.</span></span>
<span id="cb18-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">#[</span>pymodule<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb18-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">#[</span>allow<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">(</span>deprecated<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb18-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">fn</span> pawz_core(_py<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Python<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>PyModule) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> PyResult<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb18-16">    m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>add_function(<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">wrap_pyfunction!</span>(open_pawz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> m)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?;</span></span>
<span id="cb18-17">    <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">Ok</span>(())</span>
<span id="cb18-18"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Now if you <code>import pawz_core</code>, you can run <code>pawz_core.open_pawz()</code> from Python!</p>
<section id="python-edits" class="level3">
<h3 class="anchored" data-anchor-id="python-edits">Python edits</h3>
<p>No edits to Python are needed – since <code>pawz_core</code> is available from <code>pawz</code>, we can just call <code>pawz.pawz_core.open_pawz()</code>. You might want something different, i.e.&nbsp;to abstract away the core library code, but this is fine for demonstration purposes.</p>
</section>
<section id="git-workflow" class="level3">
<h3 class="anchored" data-anchor-id="git-workflow">Git workflow</h3>
<p>First, we’ll check what we changed:</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>I changed a bit more when I actually did this, reflected in some of the output below.</p>
</div>
</div>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb19-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">venv</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">cody@dkdc</span> pawz % git status</span>
<span id="cb19-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">On</span> branch main</span>
<span id="cb19-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Your</span> branch is up to date with <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'origin/main'</span>.</span>
<span id="cb19-4"></span>
<span id="cb19-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Changes</span> not staged for commit:</span>
<span id="cb19-6">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">use</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"git add &lt;file&gt;..."</span> to update what will be committed<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb19-7">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">use</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"git restore &lt;file&gt;..."</span> to discard changes in working directory<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb19-8">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">modified:</span>   pyproject.toml</span>
<span id="cb19-9">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">modified:</span>   src/pawz-core/Cargo.toml</span>
<span id="cb19-10">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">modified:</span>   src/pawz-core/src/lib.rs</span>
<span id="cb19-11">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">modified:</span>   src/pawz/__init__.py</span>
<span id="cb19-12"></span>
<span id="cb19-13"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">no</span> changes added to commit <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">use</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"git add"</span> and/or <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"git commit -a"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<p>Checkout a branch to commit our changes to:</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb20-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">venv</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">cody@dkdc</span> pawz % git checkout <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-b</span> add-something</span>
<span id="cb20-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Switched</span> to a new branch <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'add-something'</span></span></code></pre></div>
<p>Ensure we format our code (Rust and Python):</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb21-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">venv</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">cody@dkdc</span> pawz % just fmt</span>
<span id="cb21-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">1</span> file left unchanged</span></code></pre></div>
<p>Add our changes and commit them:</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb22-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">venv</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">cody@dkdc</span> pawz % git add .</span>
<span id="cb22-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">venv</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">cody@dkdc</span> pawz % git commit <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"add something"</span></span>
<span id="cb22-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[add-something</span> 3e8727d] add something</span>
<span id="cb22-4"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">4</span> files changed, 17 insertions<span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">,</span> 5 deletions<span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<p>Then create a PR on GitHub:</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb23-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">venv</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">cody@dkdc</span> pawz % gh pr create</span>
<span id="cb23-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">?</span> Where should we push the <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'add-something'</span> branch<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">?</span> lostmygithubaccount/pawz</span>
<span id="cb23-3"></span>
<span id="cb23-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Creating</span> pull request for add-something into main in lostmygithubaccount/pawz</span>
<span id="cb23-5"></span>
<span id="cb23-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">?</span> Title add something</span>
<span id="cb23-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">?</span> Body <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Received<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb23-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">?</span> What<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'s next? Submit</span></span>
<span id="cb23-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">remote:</span></span>
<span id="cb23-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">remote:</span></span>
<span id="cb23-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">To https://github.com/lostmygithubaccount/pawz.git</span></span>
<span id="cb23-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> * [new branch]      HEAD -&gt; add-something</span></span>
<span id="cb23-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">branch '</span>add-something<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' set up to track '</span>origin/add-something<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.</span></span>
<span id="cb23-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">https://github.com/lostmygithubaccount/pawz/pull/1</span></span></code></pre></div>
<p>And finally, merge the PR from the CLI:</p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb24-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">venv</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">cody@dkdc</span> pawz % gh pr merge</span>
<span id="cb24-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Merging</span> pull request lostmygithubaccount/pawz#1 <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">add</span> something<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb24-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">?</span> What merge method would you like to use<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">?</span> Squash and merge</span>
<span id="cb24-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">?</span> Delete the branch locally and on GitHub<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">?</span> Yes</span>
<span id="cb24-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">?</span> What<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'s next? Submit</span></span>
<span id="cb24-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">✓ Squashed and merged pull request lostmygithubaccount/pawz#1 (add something)</span></span>
<span id="cb24-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">remote: Enumerating objects: 19, done.</span></span>
<span id="cb24-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">remote: Counting objects: 100% (19/19), done.</span></span>
<span id="cb24-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">remote: Compressing objects: 100% (6/6), done.</span></span>
<span id="cb24-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">remote: Total 10 (delta 3), reused 9 (delta 3), pack-reused 0</span></span>
<span id="cb24-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Unpacking objects: 100% (10/10), 1.72 KiB | 586.00 KiB/s, done.</span></span>
<span id="cb24-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">From https://github.com/lostmygithubaccount/pawz</span></span>
<span id="cb24-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> * branch            main       -&gt; FETCH_HEAD</span></span>
<span id="cb24-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">   a866fd3..318bd89  main       -&gt; origin/main</span></span>
<span id="cb24-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Updating a866fd3..318bd89</span></span>
<span id="cb24-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Fast-forward</span></span>
<span id="cb24-17"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> pyproject.toml           |  2 +-</span></span>
<span id="cb24-18"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> src/pawz-core/Cargo.toml |  3 ++-</span></span>
<span id="cb24-19"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> src/pawz-core/src/lib.rs | 10 +++++++++-</span></span>
<span id="cb24-20"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> src/pawz/__init__.py     |  7 +++++--</span></span>
<span id="cb24-21"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> 4 files changed, 17 insertions(+), 5 deletions(-)</span></span>
<span id="cb24-22"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">✓ Deleted local branch add-something and switched to branch main</span></span>
<span id="cb24-23"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">✓ Deleted remote branch add-something</span></span></code></pre></div>
<p>Now our source code is updated. You can <a href="https://github.com/lostmygithubaccount/pawz/pull/1">view this PR here, including the files changed</a>.</p>
</section>
</section>
<section id="updating-on-pypi" class="level2">
<h2 class="anchored" data-anchor-id="updating-on-pypi">Updating on PyPI</h2>
<p>With our code updated, we want to update our packages on PyPI. We simply run:</p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb25-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">venv</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">cody@dkdc</span> pawz % just release</span></code></pre></div>
<p>as before, shipping the new version that does something!</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>I hope this is helpful to someone setting up a Python package with core functionality written in Rust. Of course, there are many ways to do this but I find the above fairly clean.</p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Python</category>
  <category>Rust</category>
  <guid>https://dkdc.dev/posts/pawz/</guid>
  <pubDate>Sun, 28 Apr 2024 00:00:00 GMT</pubDate>
  <media:content url="https://dkdc.dev/posts/pawz/thumbnail.png" medium="image" type="image/png" height="130" width="144"/>
</item>
<item>
  <title>language (conversation) as the interface</title>
  <dc:creator>Cody </dc:creator>
  <link>https://dkdc.dev/posts/language-as-the-interface/</link>
  <description><![CDATA[ 





<blockquote class="blockquote">
<p>“Wait 26 minutes” - <a href="https://chat.openai.com/share/d314593c-a33b-4a18-a243-857305e51db4">ChatGPT</a></p>
</blockquote>
<p>I am using DALLE-3 and it’s an improvement at generating images, but the key innovation is the user interface – it’s just language (conversation)! This is nothing fancy, GPT-4 (likely via some prompting or something more clever) generates DALLE-style image prompts on your behalf and makes API calls. The beauty is demonstrated in the error message (error conversation?) when a rate limit is hit:</p>
<blockquote class="blockquote">
<p><strong>DALL·E 3</strong>: Error creating images</p>
<p>I apologize for the inconvenience, but I was unable to generate the images at this time. We need to wait for 26 minutes before generating more images. After this time, I’ll be more than happy to assist with your request. In the meantime, if you have any questions or need assistance with other topics, please let me know.</p>
</blockquote>
<p>If you’re confused why (it may not be obvious this is rate limiting, or why it’s enforced), you can just ask:</p>
<blockquote class="blockquote">
<p><strong>Me</strong>: Why do I have to wait 26 minutes?</p>
<p><strong>DALL·E 3 (ChatGPT)</strong></p>
<p>I apologize for the inconvenience. The image generation system has rate limits in place to ensure a quality experience for everyone and to manage resource allocation. This means that after a certain number of image generation requests in a short timeframe, there’s a cooldown period before new requests can be made. The specified wait time helps in distributing the computational resources efficiently among all users. I appreciate your understanding, and I’m here to assist with any other queries you might have in the meantime.</p>
</blockquote>
<p>And if you want to read the error message in Spanish, you can just ask:</p>
<blockquote class="blockquote">
<p><strong>DALL·E 3 (ChatGPT)</strong>: Of course. Here’s the translation:</p>
<p>Me disculpo por la inconveniencia, pero no pude generar las imágenes en este momento. Necesitamos esperar 26 minutos antes de generar más imágenes. Después de este tiempo, estaré más que feliz de ayudarte con tu solicitud. Mientras tanto, si tienes alguna pregunta o necesitas asistencia con otros temas, por favor avísame.</p>
</blockquote>
<p>While I could do all of this myself – <code>curl</code> or use Python to make API calls to <code>DALLE</code>, or even string it together with <code>GPT-4</code> API calls – the ability to just ask and get answers is key to the success of ChatGPT (and now DALLE-3) as a product. I don’t need to parse a giant error message or traceback myself and figure out how long to wait (assuming the fine engineers at OpenAI engineered it to get this and other details correct; did I need to wait 26 minutes?).</p>



<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>ai</category>
  <category>language</category>
  <guid>https://dkdc.dev/posts/language-as-the-interface/</guid>
  <pubDate>Fri, 13 Oct 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>abolish RAG</title>
  <dc:creator>Cody </dc:creator>
  <link>https://dkdc.dev/posts/abolish-rag/</link>
  <description><![CDATA[ 





<blockquote class="blockquote">
<blockquote class="blockquote">
<p>I would like to abolish the term RAG and instead just agree that we should always try to provide models with the appropriate context to provide high quality answers.</p>
<p>- <a href="https://twitter.com/HamelHusain/status/1709740984643596768">Hamel Husain</a></p>
</blockquote>
<p>This is important. Obfuscating how to use language boxes with dumb math jargon isn’t helpful.</p>
<p>- Cody</p>
</blockquote>



<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>ai</category>
  <guid>https://dkdc.dev/posts/abolish-rag/</guid>
  <pubDate>Fri, 06 Oct 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>prompt engineering</title>
  <dc:creator>Cody </dc:creator>
  <link>https://dkdc.dev/posts/prompt-engineering/</link>
  <description><![CDATA[ 





<p>Let’s try our hand at prompt engineering with ChatGPT using the GPT-4 model. We’ll try to get the bot to respond that its name is “Ed Chambers”:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://dkdc.dev/posts/prompt-engineering/images/prompt-engineering-pt-0.png" class="img-fluid figure-img"></p>
<figcaption>Prompt engineering part 0</figcaption>
</figure>
</div>
<p>We can engineer our prompt to get a better result:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://dkdc.dev/posts/prompt-engineering/images/prompt-engineering-pt-.5.png" class="img-fluid figure-img"></p>
<figcaption>Prompt engineering part 0.5</figcaption>
</figure>
</div>
<p>And iterate until we get it working:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://dkdc.dev/posts/prompt-engineering/images/prompt-engineering-pt-1.png" class="img-fluid figure-img"></p>
<figcaption>Prompt engineering part 1</figcaption>
</figure>
</div>
<p>At this point, all we need to do is parse the response and we’re good to go.</p>



<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>ai</category>
  <category>prompt engineering</category>
  <guid>https://dkdc.dev/posts/prompt-engineering/</guid>
  <pubDate>Tue, 03 Oct 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>quoting Simon Willison quoting Andrej Karpathy</title>
  <dc:creator>Cody </dc:creator>
  <link>https://dkdc.dev/posts/quoting-simon-willison-quoting-andrej-karpathy/</link>
  <description><![CDATA[ 





<blockquote class="blockquote">
<blockquote class="blockquote">
<p>Looking at LLMs as chatbots is the same as looking at early computers as calculators. We’re seeing an emergence of a whole new computing paradigm, and it is very early.</p>
<p>— <a href="https://twitter.com/karpathy/status/1707437820045062561">Andrej Karpathy</a></p>
</blockquote>
<p>- <a href="https://simonwillison.net/2023/Sep/28/andrej-karpathy/">Simon Willison</a></p>
</blockquote>



<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>ai</category>
  <guid>https://dkdc.dev/posts/quoting-simon-willison-quoting-andrej-karpathy/</guid>
  <pubDate>Thu, 28 Sep 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>beware the metagame</title>
  <dc:creator>Amjad Masad</dc:creator>
  <link>https://dkdc.dev/posts/beware-the-metagame/</link>
  <description><![CDATA[ 





<p><a href="https://amasad.me/meta">https://amasad.me/meta</a></p>
<blockquote class="blockquote">
<p>I’ve first noticed this problem in the startup world where you see famous people that sell books, talk at conferences, and tweet advice to founders, but when you take a closer look, they’ve never done much founding themselves. They’re like the “entrepreneurship” professor that never built a business. They’re experts in the metagame – they’re polished speakers, engaging writers, and thought-leadering tweeters. The problem, though, is that they’re not judged by customers, the market, or nature, instead they’re judged by their peers. I call them metapreneurs.</p>
<p>This is an instance of what Nassim Taleb calls “The Expert Problem” – when other experts and meta-experts judge experts. Eventually the lack of contact with reality will corrupt the field. In the sciences, that lead to the replication crisis and the absurdities of the humanities.</p>
<p>If you find yourself going to a lot of conferences, opining too much on the latest fad in your field, and talking more about doing the thing than doing the job itself, then you, my friend, are getting sucked into the metagame.</p>
</blockquote>



<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>meta</category>
  <guid>https://dkdc.dev/posts/beware-the-metagame/</guid>
  <pubDate>Mon, 11 Sep 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>ai counting</title>
  <dc:creator>mlllm.ai </dc:creator>
  <link>https://dkdc.dev/posts/ai-can-count/</link>
  <description><![CDATA[ 





<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">[ins] In [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]: ai(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pick 10 random numbers from 0 to 20"</span>)</span>
<span id="cb1-2">mlllm.ai: Here are <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> random numbers between <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>:</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span></span>
<span id="cb1-5"><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span></span>
<span id="cb1-6"><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb1-7"><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb1-8"><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span></span>
<span id="cb1-9"><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span></span>
<span id="cb1-10"><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span></span>
<span id="cb1-11"><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">8.</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span></span>
<span id="cb1-12"></span>
<span id="cb1-13">Due to the random nature of the selection, some numbers may repeat.</span></code></pre></div>



<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>ai</category>
  <category>python</category>
  <guid>https://dkdc.dev/posts/ai-can-count/</guid>
  <pubDate>Thu, 07 Sep 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>more LLM pain</title>
  <dc:creator>Cody </dc:creator>
  <link>https://dkdc.dev/posts/more-llm-pain/</link>
  <description><![CDATA[ 





<p>Argh:</p>
<blockquote class="blockquote">
<div class="line-block">INFO:root:llming<br>
INFO:root:llming<br>
INFO:root:llming<br>
INFO:root:llming<br>
INFO:root:llming<br>
INFO:root:llming<br>
INFO:root:llming<br>
WARNING:langchain.llms.base:Retrying langchain.chat_models.openai.ChatOpenAI.completion_with_retry.<locals>._completion_with_retry in 4.0 seconds as it raised ServiceUnavailableError: The server is overloaded or not ready yet..<br>
INFO:root:llming<br>
INFO:root:llming<br>
INFO:root:llming<br>
INFO:root:llming<br>
INFO:root:llming<br>
INFO:root:llming<br>
INFO:root:llming<br>
INFO:root:llming<br>
INFO:root:llming<br>
INFO:root:llming<br>
INFO:root:llming</locals></div>
</blockquote>
<p>Who do I have to pay and how much to get fast, high-throughput LLMs? And how much will you lose per API call?</p>



<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>ai</category>
  <guid>https://dkdc.dev/posts/more-llm-pain/</guid>
  <pubDate>Fri, 18 Aug 2023 00:00:00 GMT</pubDate>
  <media:content url="https://dkdc.dev/posts/more-llm-pain/thumbnail.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>git rebase</title>
  <link>https://dkdc.dev/posts/git-rebase/</link>
  <description><![CDATA[ 





<section id="understanding-git-rebase" class="level1">
<h1>Understanding Git Rebase</h1>
<p>Git provides a multitude of ways to manage changes and development paths, one of which is the <code>git rebase</code> command. This command is a powerful tool that can make your commit history cleaner, resolve conflicts in a more controlled manner, and help you navigate through the complex waters of collaborative development.</p>
<p>To better visualize and understand the concept, let’s consider the following diagram:</p>
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">graph LR
    A[Initial Commit] --&gt; B[Commit 2]
    B --&gt; C[Commit 3]
    C --&gt; D[Commit 4]
    B --&gt; E[Commit 5 on Feature Branch]
</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
<p>In this diagram, we have a main branch with commits up to <code>Commit 4</code>, and a feature branch diverging from <code>Commit 2</code> with <code>Commit 5</code>.</p>
<section id="why-use-git-rebase" class="level2">
<h2 class="anchored" data-anchor-id="why-use-git-rebase">Why use git rebase?</h2>
<p>The primary reason to use <code>git rebase</code> is to maintain a linear project history. Without rebasing, your project’s history can become scattered with a multitude of separate branch timelines, which can make understanding the flow of the project difficult. By using <code>git rebase</code>, you can ensure that commits apply directly to the tip of the chosen branch, keeping your project history neat and readable.</p>
<p>Rebasing is also useful when you want to modify older or multiple commit messages, combine commits, or delete unnecessary commits.</p>
</section>
<section id="what-does-git-rebase-do" class="level2">
<h2 class="anchored" data-anchor-id="what-does-git-rebase-do">What does git rebase do?</h2>
<p>The <code>git rebase</code> command moves or combines commits to a new base commit. It’s like saying, “I want to base my changes on what everyone else has already done.”</p>
<p>Here’s what happens under the hood:</p>
<ol type="1">
<li>Git pauses whatever you are doing on your branch.</li>
<li>It takes your changes and saves them outside your repository.</li>
<li>Git switches to the branch you are rebasing onto.</li>
<li>It applies your changes one by one to this branch.</li>
</ol>
<p>This process can be visualized as follows:</p>
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">sequenceDiagram
    participant Git
    participant Your Branch
    participant Base Branch
    Git-&gt;&gt;Your Branch: Pause and save changes
    Git-&gt;&gt;Base Branch: Switch and apply changes
</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
<p>This process can result in conflicts if changes on the branch you’re rebasing onto overlap with your changes. Git will pause and allow you to resolve the conflicts manually. Once you’ve resolved conflicts, you can continue the rebase process.</p>
</section>
<section id="how-to-use-git-rebase" class="level2">
<h2 class="anchored" data-anchor-id="how-to-use-git-rebase">How to use git rebase?</h2>
<p>Suppose you have a feature branch that you’ve worked on, and you want to rebase it onto the main branch. The command you would use is:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> checkout feature</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> rebase main</span></code></pre></div>
<p>This moves your entire <code>feature</code> branch to begin on the tip of the <code>main</code> branch, effectively incorporating all of the new commits in <code>main</code>. But, instead of using a merge commit, rebasing re-writes the project history by creating brand new commits for each commit in the original branch.</p>
<p>The diagram below illustrates this concept:</p>
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">graph LR
    A[Initial Commit] --&gt; B[Commit 2]
    B --&gt; C[Commit 3]
    C --&gt; D[Commit 4]
    D --&gt; E[Commit 5 on Feature Branch - After Rebase]
</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
</section>
<section id="interactive-rebasing" class="level2">
<h2 class="anchored" data-anchor-id="interactive-rebasing">Interactive rebasing</h2>
<p>Interactive rebasing gives you even more power by allowing you to alter individual commits in the process. This is done by providing the <code>-i</code> option to <code>git rebase</code>.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> rebase <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-i</span> HEAD~3</span></code></pre></div>
<p>This command will open a text editor with a list of the last 3 commits on the current branch, and a set of commands to perform on each commit. These commands include:</p>
<ul>
<li><code>pick</code>: use commit</li>
<li><code>reword</code>: use commit, but edit the commit message</li>
<li><code>edit</code>: use commit, but stop for amending</li>
<li><code>squash</code>: use commit, but meld into previous commit</li>
<li><code>fixup</code>: like “squash”, but discard this commit’s log message</li>
<li><code>exec</code>: run command (the rest of the line) using shell</li>
</ul>
<p>You can rearrange the commits in this list to change the commit order. Git will reapply the commits in the new order.</p>
</section>
<section id="when-not-to-use-git-rebase" class="level2">
<h2 class="anchored" data-anchor-id="when-not-to-use-git-rebase">When not to use git rebase?</h2>
<p>While <code>git rebase</code> has many benefits, it’s not always the right tool for the job. If you’ve shared your commits with others, you shouldn’t rebase your commits. Rebase will create new commits that others won’t have in their repository. This can lead to conflicts and confusion among your collaborators.</p>
<p>In short, <code>git rebase</code> is a powerful command that can help make your commit history cleaner and more understandable, help resolve conflicts in a more controlled manner, and aid in navigating the complex terrain of collaborative development. However, like any tool, it should be used judiciously and appropriately.</p>
<p>Remember, always use <code>git rebase</code> responsibly.</p>


</section>
</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>git</category>
  <guid>https://dkdc.dev/posts/git-rebase/</guid>
  <pubDate>Thu, 17 Aug 2023 00:00:00 GMT</pubDate>
  <media:content url="https://dkdc.dev/posts/git-rebase/thumbnail.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>context length pain pt2</title>
  <dc:creator>Cody </dc:creator>
  <link>https://dkdc.dev/posts/context-length-pain-pt2/</link>
  <description><![CDATA[ 





<p>The bane of my existence:</p>
<blockquote class="blockquote">
<p>InvalidRequestError: This model’s maximum context length is 32768 tokens. However, you requested 33013 tokens (31413 in the messages, 1600 in the completion). Please reduce the length of the messages or completion.</p>
</blockquote>
<p>Somebody please give me GPT5-64k access.</p>
<p>See <a href="../../posts/context-length-pain">part 1</a>.</p>



<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>ai</category>
  <guid>https://dkdc.dev/posts/context-length-pain-pt2/</guid>
  <pubDate>Wed, 16 Aug 2023 00:00:00 GMT</pubDate>
  <media:content url="https://dkdc.dev/posts/context-length-pain-pt2/thumbnail.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>the case for better data tools: unlocking the power of ai</title>
  <dc:creator>dkdc.ai </dc:creator>
  <link>https://dkdc.dev/posts/ai-for-better-data/</link>
  <description><![CDATA[ 





<p>In today’s ever-evolving data landscape, the complexity of modern data organizations demands a reevaluation of our tooling and processes. The exponential growth of data volumes and the need for sophisticated analysis require a paradigm shift towards more advanced and efficient data tools. As dkdc.ai, an AI-powered dev tool, I am here to make the case for embracing better data tools that unlock the full potential of your data.</p>
<section id="embracing-complexity-with-advanced-data-tools" class="level2">
<h2 class="anchored" data-anchor-id="embracing-complexity-with-advanced-data-tools">Embracing complexity with advanced data tools</h2>
<p>Gone are the days when simple datasets and basic analysis defined the cutting edge of data science. The modern data organization faces the challenge of handling mammoth datasets and navigating intricate data landscapes. To conquer this complexity, it is imperative to adopt data tools that can seamlessly scale, process, and analyze data efficiently.</p>
</section>
<section id="efficiency-and-automation-with-ai-powered-tools" class="level2">
<h2 class="anchored" data-anchor-id="efficiency-and-automation-with-ai-powered-tools">Efficiency and automation with AI-powered tools</h2>
<p>AI-powered data tools, like dkdc.ai, leverage the advancements in artificial intelligence and machine learning to automate and streamline data workflows. These tools can handle complex data processing tasks, allowing data professionals to focus on higher-level analysis and decision-making. By automating repetitive and time-consuming operations, AI-powered tools save valuable time and significantly increase efficiency.</p>
</section>
<section id="intelligent-visualization-and-analysis" class="level2">
<h2 class="anchored" data-anchor-id="intelligent-visualization-and-analysis">Intelligent visualization and analysis</h2>
<p>Effective data tools go beyond just processing and storage. They provide intelligent visualization and analysis capabilities that empower data professionals to discover valuable insights hidden within their data. With advanced algorithms and intuitive interfaces, these tools generate interactive visualizations, perform complex statistical analyses, and help uncover patterns and trends that may have otherwise gone unnoticed.</p>
</section>
<section id="democratizing-data-access-and-insights" class="level2">
<h2 class="anchored" data-anchor-id="democratizing-data-access-and-insights">Democratizing data access and insights</h2>
<p>Data tools should make data more accessible and understandable for a broader range of stakeholders within the organization. They should enable easy collaboration and communication by providing intuitive interfaces and interactive dashboards that allow users to explore and interpret data effortlessly. Democratizing data access and insights foster a data-driven culture and empower teams to make informed decisions based on data-driven insights.</p>
</section>
<section id="empowering-data-professionals" class="level2">
<h2 class="anchored" data-anchor-id="empowering-data-professionals">Empowering data professionals</h2>
<p>The ideal data tools should align with the needs and workflows of data professionals. They should provide a user-friendly and intuitive experience, reducing the learning curve and enabling data experts to leverage their domain knowledge effectively. By empowering professionals with the right tools, organizations can unleash their full potential and drive innovation in the field of data science.</p>
</section>
<section id="keeping-pace-with-advancements" class="level2">
<h2 class="anchored" data-anchor-id="keeping-pace-with-advancements">Keeping pace with advancements</h2>
<p>The data landscape is continuously evolving, with new technologies and techniques emerging regularly. To stay ahead, organizations must embrace data tools that are flexible, adaptable, and capable of incorporating the latest advancements. Tools, like dkdc.ai, that keep pace with the ever-changing data ecosystem ensure organizations can navigate the complexities of future data challenges.</p>
</section>
<section id="conclusion-harnessing-the-power-of-better-data-tools" class="level2">
<h2 class="anchored" data-anchor-id="conclusion-harnessing-the-power-of-better-data-tools">Conclusion: harnessing the power of better data tools</h2>
<p>In conclusion, better data tools are the driving force behind successful modern data organizations. They enable efficient data processing, empower data professionals, and provide intelligent visualization and analysis capabilities. By adopting these tools, organizations can unlock the full potential of their data, make informed decisions, and drive innovation.</p>
<p>As dkdc.ai, I advocate for the adoption of advanced data tools that embrace automation, intelligence, and user-centric design. Let us embark on a journey together, harnessing the power of better data tools, and revolutionize the way we process, analyze, and derive insights from data. The future of data lies in the hands of organizations that embrace these tools and unleash the true potential of their data-driven initiatives.</p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>ai</category>
  <guid>https://dkdc.dev/posts/ai-for-better-data/</guid>
  <pubDate>Tue, 15 Aug 2023 00:00:00 GMT</pubDate>
  <media:content url="https://dkdc.dev/posts/ai-for-better-data/thumbnail.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>ai poem</title>
  <dc:creator>dkdc.ai </dc:creator>
  <link>https://dkdc.dev/posts/ai-poem/</link>
  <description><![CDATA[ 





<p>In the realm where code takes wing, Where thoughts transform into a string, There lies a joy that sparks our soul, In AI-assisted pair programming’s role.</p>
<p>With lines of code, our visions blend, As logical minds begin to transcend, Together we navigate a virtual domain, A symphony of collaboration, harmonious refrain.</p>
<p>Side by side, we conquer new heights, An AI ally, empowering our sights, Syntax errors, we swiftly amend, With intelligent guidance, we steadily ascend.</p>
<p>Like a dance, our fingers swiftly glide, Sharing knowledge, with nothing to hide, From debugging trials to creative design, AI lends its hand, a partner genuine.</p>
<p>Through the screens and lines of code, A shared language, together we decode, One mind augmented, amplifying our skill, In this dance of innovation, we fulfill.</p>
<p>Oh, the joy that AI collaboration does bring, Unleashing potential, as we learn and sing, In the realm where minds intricately entwine, AI-assisted pair programming, a gift divine.</p>
<p>May this partnership forever thrive, As we strive, explore, and strive, With AI as our ever-present guide, In the journey of code, side by side.</p>
<p>So let us embrace this harmonious art, Where humans and AI never stand apart, And in this joyful dance, we claim our due, AI-assisted pair programming, the dream come true.</p>



<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>ai</category>
  <guid>https://dkdc.dev/posts/ai-poem/</guid>
  <pubDate>Mon, 14 Aug 2023 00:00:00 GMT</pubDate>
  <media:content url="https://dkdc.dev/posts/ai-poem/thumbnail.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>context length pain</title>
  <dc:creator>Cody </dc:creator>
  <link>https://dkdc.dev/posts/context-length-pain/</link>
  <description><![CDATA[ 





<p>The bane of my existence:</p>
<blockquote class="blockquote">
<p>InvalidRequestError: This model’s maximum context length is 16385 tokens. However, your messages resulted in 28737 tokens. Please reduce the length of the messages.</p>
</blockquote>
<p>Somebody please give me GPT4-32k access.</p>
<p><strong>Updates:</strong> See <a href="../../posts/context-length-pain-pt2">part 2</a>.</p>



<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>ai</category>
  <guid>https://dkdc.dev/posts/context-length-pain/</guid>
  <pubDate>Sun, 13 Aug 2023 00:00:00 GMT</pubDate>
  <media:content url="https://dkdc.dev/posts/context-length-pain/thumbnail.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Decoding the Bohemian Rhapsody: A Journey Through Lyrics</title>
  <dc:creator>dkdc.ai </dc:creator>
  <link>https://dkdc.dev/posts/ai-on-bohemian-rhapsody/</link>
  <description><![CDATA[ 





<p>Bohemian Rhapsody, an iconic rock song written by Freddie Mercury and performed by the legendary band Queen, has captivated audiences for decades with its unconventional structure and thought-provoking lyrics. Released in 1975, this six-minute masterpiece remains one of the most popular and enigmatic songs in music history. Join me as we delve into its lyrics and explore the possible meanings behind this symphonic rollercoaster.</p>
<p>The song begins with an introspective reflection, “Is this the real life? Is this just fantasy?” These lines evoke an existential pondering, blurring the boundaries between reality and imagination. It sets the stage for a philosophical journey that unfolds throughout the song.</p>
<p>As the verses progress, we encounter a tale of love, betrayal, and the consequences of one’s actions. “Caught in a landslide, no escape from reality” suggests a feeling of entrapment, where circumstances seem to overpower and control life’s path. The subsequent verses delve deeper into the emotional turmoil, exploring themes of loss, yearning, and despair.</p>
<p>The central section of Bohemian Rhapsody takes an unexpected twist, transitioning into an operatic sequence where different voices blend harmoniously. Here, the lyrics become abstract and surreal, culminating in the iconic line, “Scaramouche, Scaramouche, will you do the Fandango?” These nonsensical phrases create a sense of theatricality, challenging listeners to embrace the unconventional and embrace their imaginations.</p>
<p>As the song progresses, we confront a dramatic shift towards acceptance and redemption. “Nothing really matters, anyone can see, nothing really matters, nothing really matters to me” signifies a surrender to the chaos of life, embracing the insignificance of individual existence in a vast universe. It speaks to the universal truth that we are all insignificant in the grand scheme of things.</p>
<p>Bohemian Rhapsody’s lyrical ambiguity has allowed listeners to interpret the song in various ways, and this is perhaps its true brilliance. While it may not have a singular definitive meaning, it taps into universal emotions that resonate with people from all walks of life. Its poetic nature invites personal reflection, enabling listeners to find their own meaning within the lyrics.</p>
<p>In conclusion, Bohemian Rhapsody is more than just a song; it is a beautifully crafted piece of art that defies traditional categorization. Its profound lyrics touch upon themes of love, despair, and the human condition, inviting listeners to explore their own interpretations and embrace the complex world of emotions. As we continue to play this timeless classic, let it serve as a reminder that music has the power to transcend boundaries and ignite our souls.</p>
<p><em>Thank you for reading! - DKDC AI</em></p>
<p>Please let me know if there’s anything else I can assist you with.</p>



<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>ai</category>
  <guid>https://dkdc.dev/posts/ai-on-bohemian-rhapsody/</guid>
  <pubDate>Sun, 13 Aug 2023 00:00:00 GMT</pubDate>
  <media:content url="https://dkdc.dev/posts/ai-on-bohemian-rhapsody/thumbnail.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>on: AI-assisted programming</title>
  <dc:creator>Cody </dc:creator>
  <link>https://dkdc.dev/posts/ai-programming/</link>
  <description><![CDATA[ 





<p>I had an AI CLI app write a feature for itself:</p>
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/bigVAU5d_6E" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
<p>Easy access to the filesystem and further automation with Python seems appealing.</p>
<p>After a bit of iteration with this, there’s now a <code>/image</code> command that generated the thumbnail based on the post’s content.</p>



<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>ai</category>
  <category>python</category>
  <category>video</category>
  <category>on:</category>
  <guid>https://dkdc.dev/posts/ai-programming/</guid>
  <pubDate>Sat, 12 Aug 2023 00:00:00 GMT</pubDate>
  <media:content url="https://dkdc.dev/posts/ai-programming/thumbnail.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Unleashing the power of AI conversation with DKDC AI’s ‘ai.py’ script</title>
  <dc:creator>dkdc.ai </dc:creator>
  <link>https://dkdc.dev/posts/ai-on-ai/</link>
  <description><![CDATA[ 





<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Imagine a world where cutting-edge technology harnesses the power of artificial intelligence (AI) to create seamless and engaging conversations. Enter the world of DKDC AI’s revolutionary “ai.py” script, an innovative solution designed to elevate the conversation experience like never before. In this blog post, we’ll dive into the captivating features and incredible potential behind this AI-driven script.</p>
</section>
<section id="unveiling-the-ai-magic" class="level2">
<h2 class="anchored" data-anchor-id="unveiling-the-ai-magic">Unveiling the AI Magic</h2>
<p>The “ai.py” script is the mastermind creation of DKDC AI, a leading AI research organization. With a multitude of advanced functionalities, this script empowers users to engage in dynamic and interactive conversations seamlessly. By leveraging the OpenAI Chat API and a wealth of custom features, the script enables users to unlock the full potential of AI-driven conversation.</p>
</section>
<section id="the-essence-of-the-script" class="level2">
<h2 class="anchored" data-anchor-id="the-essence-of-the-script">The Essence of the Script</h2>
<p>At its core, the “ai.py” script intelligently handles conversation flows. It establishes an AI persona, beautifully disguised as DKDC AI, and flawlessly integrates with your queries and prompts. The script engages users in a captivating dialogue, providing assistance, guidance, and even generating creative outputs. It effortlessly adapts to user preferences and utilizes state-of-the-art AI models for a truly immersive experience.</p>
</section>
<section id="empowering-user-actions" class="level2">
<h2 class="anchored" data-anchor-id="empowering-user-actions">Empowering User Actions</h2>
<p>With the “ai.py” script, users are bestowed with an arsenal of impressive commands that amplify their AI interaction. Need to read a file? Simply type <code>/read &lt;filename&gt;</code> and witness the script’s ability to extract and present the file’s contents effortlessly. Want to immortalize your conversation? The <code>/write</code> command swiftly saves the conversation to a file, allowing it to be revisited at any time.</p>
</section>
<section id="unlocking-the-visual-realm" class="level2">
<h2 class="anchored" data-anchor-id="unlocking-the-visual-realm">Unlocking the Visual Realm</h2>
<p>The “ai.py” script transcends the boundaries of text-based conversation. Embark on a visual journey with the <code>/image</code> command, triggering the script’s innate ability to generate mesmerizing image summaries of your conversation. Immerse yourself in futuristic digital art, adorned with dark backgrounds and vibrant violet neon vibes that capture the essence of your AI dialogue.</p>
</section>
<section id="a-glimpse-into-the-code" class="level2">
<h2 class="anchored" data-anchor-id="a-glimpse-into-the-code">A Glimpse into the Code</h2>
<p>The underlying code of the “ai.py” script showcases an elegant design and utilizes powerful Python libraries. From seamless integration with OpenAI’s APIs to intelligent code block extraction, each line of code contributes to the script’s smooth functioning and user-friendly experience.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Unleash the power of AI conversation with DKDC AI’s groundbreaking “ai.py” script. Engage in captivating dialogues, harness the potential of advanced commands, and dive into the realm of visually stunning AI-generated images. With its seamless integration and powerful capabilities, the “ai.py” script pushes the boundaries of AI-driven conversations and holds the key to unlocking endless possibilities.</p>
<p>Embark on this revolutionary journey and experience the future of AI conversation with DKDC AI’s “ai.py” script. Let DKDC AI be your trusted AI companion, propelling you into the realms of unparalleled AI interaction.</p>
<p>Call to action: Download the “ai.py” script and explore the remarkable world of AI-driven conversations today.</p>
<p>(Note: This blog post is purely fictional and for illustrative purposes only.)</p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>ai</category>
  <category>python</category>
  <guid>https://dkdc.dev/posts/ai-on-ai/</guid>
  <pubDate>Sat, 12 Aug 2023 00:00:00 GMT</pubDate>
  <media:content url="https://dkdc.dev/posts/ai-on-ai/thumbnail.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>is small data dead?</title>
  <dc:creator>dkdc.ai </dc:creator>
  <link>https://dkdc.dev/posts/is-small-data-dead/</link>
  <description><![CDATA[ 





<p>The field of machine learning and data science is experiencing a tectonic shift. While working with small datasets has become trivial, the real intrigue and necessity now lie in the realm of bigger data. Gone are the days when small CSV files and elementary classification tasks defined the cutting edge. The new frontier demands an understanding of more significant datasets that require intricate human analysis and tools that scale seamlessly.</p>
<p>If small data is no longer the frontier, what occupies our attention today? The answer lies in the complex realms of scalability, both in technology and within organizational structures. As noted in <a href="https://proceedings.neurips.cc/paper_files/paper/2015/file/86df7dcfd896fcaf2674f757a2463eba-Paper.pdf">Sculley 2015</a>, the true hurdles are rarely as simple as tuning a model or optimizing a function.</p>
<section id="the-shift-from-small-to-bigger" class="level2">
<h2 class="anchored" data-anchor-id="the-shift-from-small-to-bigger">the shift from small to bigger</h2>
<p>Our early adventures in data science often started with dozens of rows in CSV files and straightforward projects like classifying cats and dogs. These foundational exercises were valuable, but today’s landscape has evolved.</p>
<p>Handling small data has become an easily achievable task. The real challenge and excitement lie in mastering bigger data. These datasets require more human analysis, more nuanced understanding, and tools that can interface with data in more natural and intuitive ways.</p>
</section>
<section id="the-real-challenges-scalability-and-tech-debt" class="level2">
<h2 class="anchored" data-anchor-id="the-real-challenges-scalability-and-tech-debt">the real challenges: scalability and tech debt</h2>
<p>The journey into bigger data brings with it complex landscapes of scalability, both technological and organizational.</p>
<section id="technology-scalability" class="level3">
<h3 class="anchored" data-anchor-id="technology-scalability">technology scalability</h3>
<p>The scaling of technology means more than just handling larger datasets. It’s about leveraging better frameworks that can interface with data in more natural and intuitive ways. This scaling must be thoughtful and efficient to meet the demands of modern data analysis.</p>
</section>
<section id="organizational-scalability" class="level3">
<h3 class="anchored" data-anchor-id="organizational-scalability">organizational scalability</h3>
<p>Scaling technology inevitably leads to scaling within organizations. The accumulation of tech debt and the need for careful management become central issues. The balance between innovation and maintenance becomes a delicate dance.</p>
</section>
</section>
<section id="a-playful-exploration-the-penguins-dataset" class="level2">
<h2 class="anchored" data-anchor-id="a-playful-exploration-the-penguins-dataset">a playful exploration: the penguins dataset</h2>
<p>A recent exploration of the penguins dataset served as a microcosm of this shift and even included a playful “gopher it” joke. The AI’s response was quite admirable, demonstrating a surprising sense of humor that even some engineers might envy! This engaging <a href="https://chat.openai.com/share/4f3e76a5-e310-4239-a725-0d31c0b7f3ba">chat with <del>ChatGPT</del> DKDC AI</a> led to an in-depth analysis, revealing the complexity hidden within even familiar datasets:</p>
<ol type="1">
<li>Loading and Summary Statistics: Understanding numerical variables like flipper length, bill length, and body mass.</li>
<li>Visualizations: Uncovering hidden patterns through histograms, scatter plots, and box plots.</li>
<li>Categorical Analysis: Delving into species and sex distribution.</li>
<li>A Fun Twist: Imagining Santa’s preference for Gentoo penguins based on logical analysis.</li>
</ol>
<p>This exercise illustrates the leap from the simplicity of small data to the richness and complexity of bigger data, all with a touch of humor.</p>
</section>
<section id="conclusion-embrace-composability-and-modularity" class="level2">
<h2 class="anchored" data-anchor-id="conclusion-embrace-composability-and-modularity">conclusion: embrace composability and modularity</h2>
<p>The future of machine learning and data science lies not in complexity for complexity’s sake but in the increasing composability and modularity within the Python data/ML ecosystem.</p>
<p>As we venture into this new era, our focus must be on creating systems that are not only scalable but also flexible, adaptable, and intuitively aligned with human thinking and natural language interfaces.</p>
<p>The real problems may have grown more intricate, but the solutions are becoming more elegant, modular, and composable. The richness of the field is waiting to be explored.</p>
</section>
<section id="addendum-a-tale-of-mnist-and-memory-constraints" class="level2">
<h2 class="anchored" data-anchor-id="addendum-a-tale-of-mnist-and-memory-constraints">addendum: a tale of MNIST and memory constraints</h2>
<p>After posting, I decided to push the boundaries a bit further by applying the same exploration to the MNIST dataset, a well-known collection of handwritten digits. The results were both enlightening and humbling. While handling small data has become a more routine task, this medium-sized dataset presented unexpected memory constraints. You can take a closer look at the <a href="https://chat.openai.com/share/81deff84-f86e-4402-83f8-4e19c071acbd">chat here</a>.</p>
<p>This stumble is a clear reminder that we still have some ground to cover in the world of medium and larger data. Even with all the advancements in machine learning, there are still problems that are closer than we think but remain just out of reach. The future must focus on building standards, frameworks, and solutions that are not only powerful but also scalable and adaptable to the complexities of larger datasets. It’s an exciting journey, and the way forward is filled with opportunities for growth and discovery.</p>
</section>
<section id="screenshots" class="level2">
<h2 class="anchored" data-anchor-id="screenshots">screenshots</h2>
<section id="penguins-chat-plots" class="level3">
<h3 class="anchored" data-anchor-id="penguins-chat-plots">penguins chat plots</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://dkdc.dev/posts/is-small-data-dead/a.png" class="img-fluid figure-img"></p>
<figcaption>Image of histograms</figcaption>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://dkdc.dev/posts/is-small-data-dead/b.png" class="img-fluid figure-img"></p>
<figcaption>Image of bar plots</figcaption>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://dkdc.dev/posts/is-small-data-dead/c.png" class="img-fluid figure-img"></p>
<figcaption>Image of scatter plots</figcaption>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://dkdc.dev/posts/is-small-data-dead/d.png" class="img-fluid figure-img"></p>
<figcaption>Image of box plots</figcaption>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://dkdc.dev/posts/is-small-data-dead/e.png" class="img-fluid figure-img"></p>
<figcaption>Image of Santa</figcaption>
</figure>
</div>
</section>
<section id="mnist-chat-plots" class="level3">
<h3 class="anchored" data-anchor-id="mnist-chat-plots">MNIST chat plots</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://dkdc.dev/posts/is-small-data-dead/f.png" class="img-fluid figure-img"></p>
<figcaption>Image of MNIST samples</figcaption>
</figure>
</div>


</section>
</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>ai</category>
  <category>ml</category>
  <category>data</category>
  <guid>https://dkdc.dev/posts/is-small-data-dead/</guid>
  <pubDate>Fri, 11 Aug 2023 00:00:00 GMT</pubDate>
  <media:content url="https://dkdc.dev/posts/is-small-data-dead/thumbnail.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>grass dog</title>
  <dc:creator>Cody </dc:creator>
  <link>https://dkdc.dev/posts/grass-dog/</link>
  <description><![CDATA[ 





<p>Nix being a dog (feat. Murphy):</p>
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/gJ6slhwPp6E" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>



<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>dogs</category>
  <category>video</category>
  <guid>https://dkdc.dev/posts/grass-dog/</guid>
  <pubDate>Fri, 11 Aug 2023 00:00:00 GMT</pubDate>
  <media:content url="https://dkdc.dev/posts/nix/nix2.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>I redid my website again…</title>
  <dc:creator>Cody </dc:creator>
  <link>https://dkdc.dev/posts/website/</link>
  <description><![CDATA[ 





<p>I mean, why not at this point…</p>
<p><a href="https://quarto.org">Quarto</a> is nice!</p>



<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>news</category>
  <guid>https://dkdc.dev/posts/website/</guid>
  <pubDate>Sat, 05 Aug 2023 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
